{"version":3,"sources":["../src/data_formatter.js"],"names":["_","decodeGeoHash","DataFormatter","ctrl","kbn","data","series","length","highestValue","lowestValue","Number","MAX_VALUE","forEach","serie","lastPoint","last","datapoints","lastValue","isArray","location","find","locations","loc","key","parseInt","alias","toUpperCase","replace","console","log","isString","push","value","valueFormatted","valueRounded","dataValue","locationName","name","locationLatitude","latitude","locationLongitude","longitude","stats","panel","valueName","roundValue","decimals","valueRange","dataList","esGeoPoint","esMetric","datapoint","encodedGeohash","decodedGeohash","esLocationName","tableData","geohash","tableLabel","metric","type","columnNames","columns","column","columnIndex","text","rows","row"],"mappings":"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","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\nimport decodeGeoHash from './geohash';\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  setValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((serie) => {\n        const lastPoint = _.last(serie.datapoints);\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n        const location = _.find(this.ctrl.locations, (loc) => {\n          return typeof loc.key === 'number' ?\n            loc.key === parseInt(serie.alias, 10) :\n            loc.key.toUpperCase() === serie.alias.replace('.', '').toUpperCase();\n        });\n        console.log(typeof serie.alias);\n        console.log(location);\n\n        if (!location) return;\n\n        if (_.isString(lastValue)) {\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n        } else {\n          const dataValue = {\n            key: serie.alias,\n            locationName: location.name,\n            locationLatitude: location.latitude,\n            locationLongitude: location.longitude,\n            value: serie.stats[this.ctrl.panel.valueName],\n            valueFormatted: lastValue,\n            valueRounded: 0\n          };\n\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n          data.push(dataValue);\n        }\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  setGeohashValues(dataList, data) {\n    if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\n\n    if (dataList && dataList.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      dataList[0].datapoints.forEach((datapoint) => {\n        const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n        const dataValue = {\n          key: encodedGeohash,\n          locationName: this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash,\n          locationLatitude: decodedGeohash.latitude,\n          locationLongitude: decodedGeohash.longitude,\n          value: datapoint[this.ctrl.panel.esMetric],\n          valueFormatted: datapoint[this.ctrl.panel.esMetric],\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  static tableHandler(tableData) {\n    const datapoints = [];\n\n    if (tableData.type === 'table') {\n      const columnNames = {};\n\n      tableData.columns.forEach((column, columnIndex) => {\n        columnNames[columnIndex] = column.text;\n      });\n\n      tableData.rows.forEach((row) => {\n        const datapoint = {};\n\n        row.forEach((value, columnIndex) => {\n          const key = columnNames[columnIndex];\n          datapoint[key] = value;\n        });\n\n        datapoints.push(datapoint);\n      });\n    }\n\n    return datapoints;\n  }\n\n  setTableValues(tableData, data) {\n    if (tableData && tableData.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      tableData[0].forEach((datapoint) => {\n        if (!datapoint.geohash) {\n          return;\n        }\n\n        const encodedGeohash = datapoint.geohash;\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n        const dataValue = {\n          key: encodedGeohash,\n          locationName: datapoint[this.ctrl.panel.tableLabel] || 'n/a',\n          locationLatitude: decodedGeohash.latitude,\n          locationLongitude: decodedGeohash.longitude,\n          value: datapoint.metric,\n          valueFormatted: datapoint.metric,\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n}\n"]}